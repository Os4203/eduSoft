import axios from 'axios';
import * as crypto from 'crypto';
import dotenv from 'dotenv';

dotenv.config();

// API endpoints
const LEETCODE_API_URL = 'https://leetcode.com/graphql';
// LeetScan API is not working (404 errors), so we'll use LeetCode's GraphQL API directly
const LEETSCAN_API_URL = process.env.LEETSCAN_API_URL || 'https://leetcode.com/graphql';

// Cache for storing API responses to reduce rate limiting
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes

/**
 * Service to interact with LeetCode API
 */
class LeetCodeService {
  /**
   * Get user data directly from LeetCode GraphQL API
   * @param {string} username - LeetCode username
   * @returns {Promise<Object>} User data including solved problems
   */
  async getUserDataFromLeetScan(username) {
    const cacheKey = `leetcode:${username}`;
    const now = Date.now();
    
    // Check cache first
    if (cache.has(cacheKey)) {
      const { data, timestamp } = cache.get(cacheKey);
      if (now - timestamp < CACHE_TTL) {
        console.log(`Using cached data for ${username}`);
        return data;
      }
    }

    try {
      console.log(`Fetching data from LeetCode GraphQL API for user: ${username}`);
      
      // First verify if the username exists
      const userQuery = `
        query userPublicProfile($username: String!) {
          matchedUser(username: $username) {
            username
            submitStats: submitStatsGlobal {
              acSubmissionNum {
                difficulty
                count
                submissions
              }
            }
          }
        }
      `;
      
      const userResponse = await axios.post(LEETCODE_API_URL, {
        query: userQuery,
        variables: { username }
      }, {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'EduSoft/1.0'
        }
      });
      
      if (!userResponse.data.data.matchedUser) {
        throw new Error(`Username '${username}' not found`);
      }
      
      console.log(`Username '${username}' exists: ${userResponse.data.data.matchedUser.username}`);
      
      // Now fetch the solved problems
      const solvedProblemsQuery = `
        query userSolvedProblems($username: String!) {
          allQuestionsCount { difficulty count }
          matchedUser(username: $username) {
            problemsSolvedBeatsStats { difficulty percentage }
            submitStats: submitStatsGlobal {
              acSubmissionNum { difficulty count submissions }
            }
            profile { reputation }
            submissionCalendar
            submitStats {
              acSubmissionNum { difficulty count submissions }
              totalSubmissionNum { difficulty count submissions }
            }
            badges { id name displayName icon }
            upcomingBadges { name icon }
            activeBadge { id }
          }
          userContestRanking(username: $username) {
            attendedContestsCount
            rating
            globalRanking
            totalParticipants
            topPercentage
            badge { name }
          }
          userContestRankingHistory(username: $username) {
            attended
            trendDirection
            problemsSolved
            totalProblems
            finishTimeInSeconds
            rating
            ranking
            contest { title startTime }
          }
          recentAcSubmissionList(username: $username, limit: 100) {
            id
            title
            titleSlug
            timestamp
            statusDisplay
            lang
            question {
              questionId
              title
              titleSlug
              difficulty
            }
          }
        }
      `;
      
      const solvedResponse = await axios.post(LEETCODE_API_URL, {
        query: solvedProblemsQuery,
        variables: { username }
      }, {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'EduSoft/1.0'
        }
      });
      
      // Format the response data
      const formattedData = {
        username,
        totalSolved: 0,
        solvedProblems: [],
        recentSubmissions: []
      };
      
      if (solvedResponse.data.data.matchedUser) {
        const userData = solvedResponse.data.data.matchedUser;
        
        // Extract total solved count
        if (userData.submitStats && userData.submitStats.acSubmissionNum) {
          const acSubmissionNum = userData.submitStats.acSubmissionNum;
          formattedData.totalSolved = acSubmissionNum.reduce((total, item) => total + item.count, 0);
        }
        
        // Extract recent submissions
        if (solvedResponse.data.data.recentAcSubmissionList) {
          formattedData.recentSubmissions = solvedResponse.data.data.recentAcSubmissionList;
        }
      }
      
      // Store in cache
      cache.set(cacheKey, {
        data: formattedData,
        timestamp: Date.now()
      });
      
      return formattedData;
    } catch (error) {
      console.error(`Error fetching user data from LeetCode API: ${error.message}`);
      throw new Error(`Failed to fetch user data: ${error.message}`);
    }
  }

  /**
   * Get user profile information
   * @param {string} username - LeetCode username
   * @returns {Promise<Object>} User profile data
   */
  async getUserProfile(username) {
    try {
      const query = `
        query userProfile($username: String!) {
          matchedUser(username: $username) {
            username
            profile {
              realName
              aboutMe
              userAvatar
              location
              skillTags
              websites
              countryName
              company
              school
              starRating
              ranking
            }
          }
        }
      `;

      const response = await axios.post(LEETCODE_API_URL, {
        query,
        variables: { username }
      });

      return response.data.data.matchedUser;
    } catch (error) {
      console.error('Error fetching LeetCode user profile:', error);
      throw new Error('Failed to fetch LeetCode user profile');
    }
  }

  /**
   * Format LeetScan data to match our expected format
   * @private
   */
  formatLeetScanData(leetScanData) {
    return {
      username: leetScanData.username,
      totalSolved: leetScanData.totalSolved || 0,
      solvedProblems: leetScanData.solvedProblems || []
    };
  }

  /**
   * Get user's recent submissions
   * @param {string} username - LeetCode username
   * @returns {Promise<Array>} Recent submissions
   */
  async getRecentSubmissions(username) {
    try {
      const userData = await this.getUserDataFromLeetScan(username);
      return userData.recentSubmissions || [];
    } catch (error) {
      console.error(`Error getting recent submissions for ${username}:`, error);
      return [];
    }
  }

  /**
   * Check if a user has solved a specific problem on LeetCode
   * @param {string} username - LeetCode username
   * @param {string|number} problemIdentifier - Problem ID, title slug, or title
   * @returns {Promise<boolean>} True if the problem is solved, false otherwise
   */
  async hasSolvedProblem(username, problemIdentifier) {
    try {
      console.log(`Checking if ${username} has solved problem: ${problemIdentifier}`);
      
      if (!username || !problemIdentifier) {
        console.error('Username or problemIdentifier is missing');
        return false;
      }

      // Determine if the identifier is a numeric ID or a title slug
      const isNumericId = !isNaN(problemIdentifier);
      const problemSlug = isNumericId ? null : problemIdentifier;
      const problemId = isNumericId ? problemIdentifier.toString() : null;
      
      console.log(`Problem identifier type: ${isNumericId ? 'Numeric ID' : 'Title Slug'}`);
      console.log(`Looking for problemId: ${problemId || 'N/A'}, problemSlug: ${problemSlug || 'N/A'}`);
      
      // Get user data including solved problems
      const userData = await this.getUserDataFromLeetScan(username);
      
      if (!userData) {
        console.error(`No user data found for ${username}`);
        return false;
      }
      
      // Extract solved problems from the GraphQL response
      let solvedProblems = [];
      
      // Check in recentAcSubmissionList for solved problems
      if (userData.recentSubmissions && userData.recentSubmissions.length > 0) {
        solvedProblems = userData.recentSubmissions.map(submission => ({
          questionId: submission.question?.questionId,
          title: submission.title,
          titleSlug: submission.titleSlug,
          status: submission.statusDisplay
        }));
      }
      
      console.log(`Found ${solvedProblems.length} solved problems for ${username}`);
      
      // Check if the problem is in the solved problems list
      const isSolved = solvedProblems.some(problem => {
        // Match by problem slug (exact match or normalized)
        if (problemSlug && problem.titleSlug) {
          const slugMatch = 
            problem.titleSlug === problemSlug || 
            problem.titleSlug.replace(/-/g, '') === problemSlug.replace(/-/g, '');
          
          if (slugMatch) {
            console.log(`✓ Found match by slug: ${problem.titleSlug}`);
            return true;
          }
        }
        
        // Match by problem ID
        if (problemId && problem.questionId) {
          const idMatch = 
            problem.questionId === problemId || 
            problem.questionId.toString() === problemId.toString();
          
          if (idMatch) {
            console.log(`✓ Found match by ID: ${problem.questionId}`);
            return true;
          }
        }
        
        // Fuzzy match by title
        if (problem.title && problemIdentifier) {
          const normTitle = problem.title.toLowerCase().replace(/[^a-z0-9]/g, '');
          const normIdentifier = problemIdentifier.toString().toLowerCase().replace(/[^a-z0-9]/g, '');
          
          const titleMatch = 
            normTitle.includes(normIdentifier) || 
            normIdentifier.includes(normTitle);
          
          if (titleMatch) {
            console.log(`✓ Found match by title: ${problem.title}`);
            return true;
          }
        }
        
        // Check if status is 'Accepted'
        if (problem.status === 'Accepted') {
          console.log(`✓ Problem has 'Accepted' status`);
          return true;
        }
        
        return false;
      });
      
      if (isSolved) {
        console.log(`✓ Problem ${problemIdentifier} is solved by ${username}`);
      } else {
        console.log(`✗ Problem ${problemIdentifier} is NOT solved by ${username}`);
        
        // If not found in solved problems, try checking recent submissions as fallback
        console.log('Checking recent submissions as fallback...');
        const recentSubmissions = await this.getRecentSubmissions(username);
        
        const isRecentlySolved = recentSubmissions.some(submission => {
          const submissionMatch = 
            (problemSlug && submission.titleSlug === problemSlug) ||
            (problemId && submission.question && submission.question.questionId === problemId) ||
            (submission.title && problemIdentifier.toString().includes(submission.title));
          
          return submissionMatch && submission.statusDisplay === 'Accepted';
        });
        
        if (isRecentlySolved) {
          console.log(`✓ Found in recent submissions: Problem ${problemIdentifier} is solved by ${username}`);
          return true;
        }
      }
      
      return isSolved;
    } catch (error) {
      console.error(`Error checking if ${username} has solved problem ${problemIdentifier}:`, error);
      return false;
    }
  }

  /**
   * Get a list of easy problems for assessment
   * @returns {Promise<Array>} List of easy problems
   */
  async getEasyProblems() {
    try {
      const query = `
        query problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {
          problemsetQuestionList: questionList(
            categorySlug: $categorySlug
            limit: $limit
            skip: $skip
            filters: $filters
          ) {
            total: totalNum
            questions: data {
              questionId
              questionFrontendId
              title
              titleSlug
              difficulty
              acRate
              topicTags {
                name
                slug
              }
            }
          }
        }
      `;

      const variables = {
        categorySlug: "",
        skip: 0,
        limit: 15,
        filters: { difficulty: "EASY" }
      };

      const response = await axios.post(LEETCODE_API_URL, {
        query,
        variables
      });

      return response.data.data.problemsetQuestionList.questions;
    } catch (error) {
      console.error('Error fetching easy problems:', error);
      throw new Error('Failed to fetch easy problems');
    }
  }

  /**
   * Select random problems for assessment
   * @param {number} count - Number of problems to select
   * @returns {Promise<Array>} Selected problems
   */
  async selectRandomProblems(count = 3) {
    try {
      // Common well-known LeetCode problems that are guaranteed to exist
      const commonProblems = [
        {
          questionId: '13',
          questionFrontendId: '13',
          title: 'Roman to Integer',
          titleSlug: 'roman-to-integer',
          difficulty: 'EASY'
        },
        {
          questionId: '9',
          questionFrontendId: '9',
          title: 'Palindrome Number',
          titleSlug: 'palindrome-number',
          difficulty: 'EASY'
        },
        {
          questionId: '66',
          questionFrontendId: '66',
          title: 'Plus One',
          titleSlug: 'plus-one',
          difficulty: 'EASY'
        },
        {
          questionId: '1',
          questionFrontendId: '1',
          title: 'Two Sum',
          titleSlug: 'two-sum',
          difficulty: 'EASY'
        },
        {
          questionId: '20',
          questionFrontendId: '20',
          title: 'Valid Parentheses',
          titleSlug: 'valid-parentheses',
          difficulty: 'EASY'
        },
        {
          questionId: '21',
          questionFrontendId: '21',
          title: 'Merge Two Sorted Lists',
          titleSlug: 'merge-two-sorted-lists',
          difficulty: 'EASY'
        }
      ];
      
      try {
        // Try to get problems from API first
        const apiProblems = await this.getEasyProblems();
        if (apiProblems && apiProblems.length >= count) {
          // Shuffle and pick random problems from API
          const shuffled = [...apiProblems].sort(() => 0.5 - Math.random());
          return shuffled.slice(0, count);
        }
      } catch (apiError) {
        console.warn('Error fetching problems from API, falling back to common problems:', apiError);
      }
      
      // Fallback to common problems if API fails
      const shuffled = [...commonProblems].sort(() => 0.5 - Math.random());
      return shuffled.slice(0, count);
    } catch (error) {
      console.error('Error selecting random problems:', error);
      throw new Error('Failed to select random problems');
    }
  }
}

export default new LeetCodeService();
